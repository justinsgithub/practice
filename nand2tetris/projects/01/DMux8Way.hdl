// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/DMux8Way.hdl
/**
 * 8-way demultiplexor:
 * [a, b, c, d, e, f, g, h] = [in, 0, 0, 0, 0, 0, 0, 0] if sel == 000
 *                            [0, in, 0, 0, 0, 0, 0, 0] if sel == 001
 *                            ...
 *                            [0, 0, 0, 0, 0, 0, 0, in] if sel == 111
| in  |  sel  |  a  |  b  |  c  |  d  |  e  |  f  |  g  |  h  |
|  0  |  000  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |
|  0  |  001  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |
|  0  |  010  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |
|  0  |  011  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |
|  0  |  100  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |
|  0  |  101  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |
|  0  |  110  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |
|  0  |  111  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |
|  1  |  000  |  1  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |
|  1  |  001  |  0  |  1  |  0  |  0  |  0  |  0  |  0  |  0  |
|  1  |  010  |  0  |  0  |  1  |  0  |  0  |  0  |  0  |  0  |
|  1  |  011  |  0  |  0  |  0  |  1  |  0  |  0  |  0  |  0  |
|  1  |  100  |  0  |  0  |  0  |  0  |  1  |  0  |  0  |  0  |
|  1  |  101  |  0  |  0  |  0  |  0  |  0  |  1  |  0  |  0  |
|  1  |  110  |  0  |  0  |  0  |  0  |  0  |  0  |  1  |  0  |
|  1  |  111  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |  1  |
 * h == 111
 * g == 110
 * f == 101
 * e == 100
 * d == 011
 * c == 010
 * b == 001
 * a == 000
 */
CHIP DMux8Way {
    IN in, sel[3];
    OUT a, b, c, d, e, f, g, h;

    PARTS:
    And(a=in, b=in, out=isin);
    And(a=sel[2], b=sel[2], out=s1);
    And(a=sel[1], b=sel[1], out=s2);
    And(a=sel[0], b=sel[0], out=s3);

    Not(in=s1, out=ns1);
    Not(in=s2, out=ns2);
    Not(in=s3, out=ns3);

    And(a=s2, b=s3, out=s2s3);
    And(a=s1, b=s2, out=s1s2);
    And(a=s1, b=s3, out=s1s3);

    And(a=ns1, b=ns3, out=ns1ns3);
    And(a=ns2, b=ns3, out=ns2ns3);
    And(a=ns1, b=ns2, out=ns1ns2);

    And(a=s1s2, b=s3, out=ish);
    And(a=s1s2, b=ns3, out=isg);
    And(a=s1s3, b=ns2, out=isf);
    And(a=s1, b=ns2ns3, out=ise);
    And(a=ns1, b=s2s3, out=isd);
    And(a=s2, b=ns1ns3, out=isc);
    And(a=s3, b=ns1ns2, out=isb);
    And(a=ns1, b=ns2ns3, out=isa);

    And(a=isin, b=ish, out=h);
    And(a=isin, b=isg, out=g);
    And(a=isin, b=isf, out=f);
    And(a=isin, b=ise, out=e);
    And(a=isin, b=isd, out=d);
    And(a=isin, b=isc, out=c);
    And(a=isin, b=isb, out=b);
    And(a=isin, b=isa, out=a);
}
